
122A_ Final_Mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000f50  00000fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063d  00800118  00800118  00000ffc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024d3  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd5  00000000  00000000  00003707  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ea  00000000  00000000  000046dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00005ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d2c  00000000  00000000  00005f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000128a  00000000  00000000  00006c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00007ee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	57 c0       	rjmp	.+174    	; 0xb0 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c3       	rjmp	.+1654   	; 0x6ac <__vector_13>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	68 01       	movw	r12, r16
  8e:	8f 01       	movw	r16, r30
  90:	70 01       	movw	r14, r0
  92:	7a 01       	movw	r14, r20
  94:	7d 01       	movw	r14, r26
  96:	8f 01       	movw	r16, r30
  98:	80 01       	movw	r16, r0
  9a:	86 01       	movw	r16, r12
  9c:	8b 01       	movw	r16, r22
  9e:	9a 01       	movw	r18, r20
  a0:	9e 01       	movw	r18, r28
  a2:	a2 01       	movw	r20, r4
  a4:	b6 01       	movw	r22, r12
  a6:	ba 01       	movw	r22, r20
  a8:	be 01       	movw	r22, r28
  aa:	c6 01       	movw	r24, r12
  ac:	c2 01       	movw	r24, r4
  ae:	ca 01       	movw	r24, r20

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d0 e4       	ldi	r29, 0x40	; 64
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	11 e0       	ldi	r17, 0x01	; 1
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	e0 e5       	ldi	r30, 0x50	; 80
  c4:	ff e0       	ldi	r31, 0x0F	; 15
  c6:	00 e0       	ldi	r16, 0x00	; 0
  c8:	0b bf       	out	0x3b, r16	; 59
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x14>
  cc:	07 90       	elpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 31       	cpi	r26, 0x18	; 24
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0x10>

000000d6 <__do_clear_bss>:
  d6:	27 e0       	ldi	r18, 0x07	; 7
  d8:	a8 e1       	ldi	r26, 0x18	; 24
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 35       	cpi	r26, 0x55	; 85
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	80 d1       	rcall	.+768    	; 0x3e8 <main>
  e8:	31 c7       	rjmp	.+3682   	; 0xf4c <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <time>:
  ec:	fc 01       	movw	r30, r24
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	60 91 51 07 	lds	r22, 0x0751	; 0x800751 <__system_time>
  f6:	70 91 52 07 	lds	r23, 0x0752	; 0x800752 <__system_time+0x1>
  fa:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <__system_time+0x2>
  fe:	90 91 54 07 	lds	r25, 0x0754	; 0x800754 <__system_time+0x3>
 102:	0f be       	out	0x3f, r0	; 63
 104:	30 97       	sbiw	r30, 0x00	; 0
 106:	21 f0       	breq	.+8      	; 0x110 <time+0x24>
 108:	60 83       	st	Z, r22
 10a:	71 83       	std	Z+1, r23	; 0x01
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	93 83       	std	Z+3, r25	; 0x03
 110:	08 95       	ret

00000112 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
 118:	1c d4       	rcall	.+2104   	; 0x952 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 11a:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 11e:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 122:	ce 01       	movw	r24, r28
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	8c 3d       	cpi	r24, 0xDC	; 220
 12a:	45 e0       	ldi	r20, 0x05	; 5
 12c:	94 07       	cpc	r25, r20
 12e:	58 f4       	brcc	.+22     	; 0x146 <pvPortMalloc+0x34>
 130:	28 17       	cp	r18, r24
 132:	39 07       	cpc	r19, r25
 134:	58 f4       	brcc	.+22     	; 0x14c <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 136:	e9 01       	movw	r28, r18
 138:	c6 5e       	subi	r28, 0xE6	; 230
 13a:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
 13c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 140:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 144:	05 c0       	rjmp	.+10     	; 0x150 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <pvPortMalloc+0x3e>
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 150:	c7 d4       	rcall	.+2446   	; 0xae0 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 152:	ce 01       	movw	r24, r28
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 15a:	08 95       	ret

0000015c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 15c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 15e:	03 96       	adiw	r24, 0x03	; 3
 160:	92 83       	std	Z+2, r25	; 0x02
 162:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	3f ef       	ldi	r19, 0xFF	; 255
 168:	34 83       	std	Z+4, r19	; 0x04
 16a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 16c:	96 83       	std	Z+6, r25	; 0x06
 16e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 170:	90 87       	std	Z+8, r25	; 0x08
 172:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 174:	10 82       	st	Z, r1
 176:	08 95       	ret

00000178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 178:	fc 01       	movw	r30, r24
 17a:	11 86       	std	Z+9, r1	; 0x09
 17c:	10 86       	std	Z+8, r1	; 0x08
 17e:	08 95       	ret

00000180 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	fc 01       	movw	r30, r24
 186:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 188:	21 81       	ldd	r18, Z+1	; 0x01
 18a:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 18c:	e9 01       	movw	r28, r18
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	9b 81       	ldd	r25, Y+3	; 0x03
 192:	13 96       	adiw	r26, 0x03	; 3
 194:	9c 93       	st	X, r25
 196:	8e 93       	st	-X, r24
 198:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 19a:	81 81       	ldd	r24, Z+1	; 0x01
 19c:	92 81       	ldd	r25, Z+2	; 0x02
 19e:	15 96       	adiw	r26, 0x05	; 5
 1a0:	9c 93       	st	X, r25
 1a2:	8e 93       	st	-X, r24
 1a4:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	9b 81       	ldd	r25, Y+3	; 0x03
 1aa:	ec 01       	movw	r28, r24
 1ac:	7d 83       	std	Y+5, r23	; 0x05
 1ae:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 1b0:	e9 01       	movw	r28, r18
 1b2:	7b 83       	std	Y+3, r23	; 0x03
 1b4:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 1b6:	72 83       	std	Z+2, r23	; 0x02
 1b8:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1ba:	19 96       	adiw	r26, 0x09	; 9
 1bc:	fc 93       	st	X, r31
 1be:	ee 93       	st	-X, r30
 1c0:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 83       	st	Z, r24
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 1d4:	48 81       	ld	r20, Y
 1d6:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1d8:	4f 3f       	cpi	r20, 0xFF	; 255
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	52 07       	cpc	r21, r18
 1de:	31 f4       	brne	.+12     	; 0x1ec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1e0:	dc 01       	movw	r26, r24
 1e2:	17 96       	adiw	r26, 0x07	; 7
 1e4:	ed 91       	ld	r30, X+
 1e6:	fc 91       	ld	r31, X
 1e8:	18 97       	sbiw	r26, 0x08	; 8
 1ea:	17 c0       	rjmp	.+46     	; 0x21a <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1ec:	fc 01       	movw	r30, r24
 1ee:	33 96       	adiw	r30, 0x03	; 3
 1f0:	dc 01       	movw	r26, r24
 1f2:	15 96       	adiw	r26, 0x05	; 5
 1f4:	2d 91       	ld	r18, X+
 1f6:	3c 91       	ld	r19, X
 1f8:	16 97       	sbiw	r26, 0x06	; 6
 1fa:	d9 01       	movw	r26, r18
 1fc:	2d 91       	ld	r18, X+
 1fe:	3c 91       	ld	r19, X
 200:	42 17       	cp	r20, r18
 202:	53 07       	cpc	r21, r19
 204:	50 f0       	brcs	.+20     	; 0x21a <vListInsert+0x4c>
 206:	02 80       	ldd	r0, Z+2	; 0x02
 208:	f3 81       	ldd	r31, Z+3	; 0x03
 20a:	e0 2d       	mov	r30, r0
 20c:	a2 81       	ldd	r26, Z+2	; 0x02
 20e:	b3 81       	ldd	r27, Z+3	; 0x03
 210:	2d 91       	ld	r18, X+
 212:	3c 91       	ld	r19, X
 214:	42 17       	cp	r20, r18
 216:	53 07       	cpc	r21, r19
 218:	b0 f7       	brcc	.-20     	; 0x206 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 21a:	a2 81       	ldd	r26, Z+2	; 0x02
 21c:	b3 81       	ldd	r27, Z+3	; 0x03
 21e:	bb 83       	std	Y+3, r27	; 0x03
 220:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 222:	15 96       	adiw	r26, 0x05	; 5
 224:	dc 93       	st	X, r29
 226:	ce 93       	st	-X, r28
 228:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 22a:	fd 83       	std	Y+5, r31	; 0x05
 22c:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 22e:	d3 83       	std	Z+3, r29	; 0x03
 230:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 232:	99 87       	std	Y+9, r25	; 0x09
 234:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 236:	fc 01       	movw	r30, r24
 238:	20 81       	ld	r18, Z
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	20 83       	st	Z, r18
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 244:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 246:	a2 81       	ldd	r26, Z+2	; 0x02
 248:	b3 81       	ldd	r27, Z+3	; 0x03
 24a:	84 81       	ldd	r24, Z+4	; 0x04
 24c:	95 81       	ldd	r25, Z+5	; 0x05
 24e:	15 96       	adiw	r26, 0x05	; 5
 250:	9c 93       	st	X, r25
 252:	8e 93       	st	-X, r24
 254:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 256:	a4 81       	ldd	r26, Z+4	; 0x04
 258:	b5 81       	ldd	r27, Z+5	; 0x05
 25a:	82 81       	ldd	r24, Z+2	; 0x02
 25c:	93 81       	ldd	r25, Z+3	; 0x03
 25e:	13 96       	adiw	r26, 0x03	; 3
 260:	9c 93       	st	X, r25
 262:	8e 93       	st	-X, r24
 264:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 266:	a0 85       	ldd	r26, Z+8	; 0x08
 268:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 26a:	11 96       	adiw	r26, 0x01	; 1
 26c:	8d 91       	ld	r24, X+
 26e:	9c 91       	ld	r25, X
 270:	12 97       	sbiw	r26, 0x02	; 2
 272:	8e 17       	cp	r24, r30
 274:	9f 07       	cpc	r25, r31
 276:	31 f4       	brne	.+12     	; 0x284 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 278:	84 81       	ldd	r24, Z+4	; 0x04
 27a:	95 81       	ldd	r25, Z+5	; 0x05
 27c:	12 96       	adiw	r26, 0x02	; 2
 27e:	9c 93       	st	X, r25
 280:	8e 93       	st	-X, r24
 282:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 284:	11 86       	std	Z+9, r1	; 0x09
 286:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 288:	8c 91       	ld	r24, X
 28a:	81 50       	subi	r24, 0x01	; 1
 28c:	8c 93       	st	X, r24
 28e:	08 95       	ret

00000290 <adc_read>:
	
	return (ADC);
}

void MOVE_Init(){
	moveMouse = INIT;
 290:	ec e7       	ldi	r30, 0x7C	; 124
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	20 81       	ld	r18, Z
 296:	87 70       	andi	r24, 0x07	; 7
 298:	99 27       	eor	r25, r25
 29a:	28 7f       	andi	r18, 0xF8	; 248
 29c:	82 2b       	or	r24, r18
 29e:	80 83       	st	Z, r24
 2a0:	ea e7       	ldi	r30, 0x7A	; 122
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	80 83       	st	Z, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	86 fd       	sbrc	r24, 6
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <adc_read+0x1a>
 2b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2b8:	08 95       	ret

000002ba <MOVE_Tick>:
	trackData = INITTrack;
}*/

void MOVE_Tick(){
	//Actions
	switch(moveMouse){
 2ba:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <moveMouse>
 2be:	8e 2f       	mov	r24, r30
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	89 30       	cpi	r24, 0x09	; 9
 2c4:	91 05       	cpc	r25, r1
 2c6:	58 f5       	brcc	.+86     	; 0x31e <MOVE_Tick+0x64>
 2c8:	fc 01       	movw	r30, r24
 2ca:	ea 5b       	subi	r30, 0xBA	; 186
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	59 c5       	rjmp	.+2738   	; 0xd82 <__tablejump2__>
		case INIT:
			
			srand(time(0));
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0b df       	rcall	.-490    	; 0xec <time>
 2d6:	cb 01       	movw	r24, r22
 2d8:	bb d5       	rcall	.+2934   	; 0xe50 <srand>
			//char where = "";
			PORTC = 0x11;
 2da:	81 e1       	ldi	r24, 0x11	; 17
 2dc:	88 b9       	out	0x08, r24	; 8
			break;
 2de:	1f c0       	rjmp	.+62     	; 0x31e <MOVE_Tick+0x64>
			while(adcF > 1024){
				adcF = ADC;
			}*/
			break;
		case check:  ;
			int adc_result0 = adc_read(0);      // read adc value at PA0
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	d5 df       	rcall	.-86     	; 0x290 <adc_read>
			int adc_result1 = adc_read(1);		// read adc value at PA1
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	d2 df       	rcall	.-92     	; 0x290 <adc_read>
			int adc_result2 = adc_read(2);		// read adc value at PA2
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	cf df       	rcall	.-98     	; 0x290 <adc_read>
			else{  // turn around
			
			}*/
			
			
			break;
 2f2:	15 c0       	rjmp	.+42     	; 0x31e <MOVE_Tick+0x64>
		case left:  // turn left
			//where = "left";
			PORTC = 0x53;
 2f4:	83 e5       	ldi	r24, 0x53	; 83
 2f6:	88 b9       	out	0x08, r24	; 8
			break;
 2f8:	12 c0       	rjmp	.+36     	; 0x31e <MOVE_Tick+0x64>
		case right: // turn right
			//where = "right;"
			PORTC = 0x35;
 2fa:	85 e3       	ldi	r24, 0x35	; 53
 2fc:	88 b9       	out	0x08, r24	; 8
			break;
 2fe:	0f c0       	rjmp	.+30     	; 0x31e <MOVE_Tick+0x64>
		case turnAround: // turn around
			//where = "back";
			break;
		case forward: // move forward
			PORTC = 0x33;
 300:	83 e3       	ldi	r24, 0x33	; 51
 302:	88 b9       	out	0x08, r24	; 8
			vTaskDelay(200);
 304:	88 ec       	ldi	r24, 0xC8	; 200
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	6c d4       	rcall	.+2264   	; 0xbe2 <vTaskDelay>
			break;
 30a:	09 c0       	rjmp	.+18     	; 0x31e <MOVE_Tick+0x64>
		case turnWait:
			PORTC = 0x00;
 30c:	18 b8       	out	0x08, r1	; 8
			vTaskDelay(200);
 30e:	88 ec       	ldi	r24, 0xC8	; 200
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	67 d4       	rcall	.+2254   	; 0xbe2 <vTaskDelay>
			break;
 314:	04 c0       	rjmp	.+8      	; 0x31e <MOVE_Tick+0x64>
		case forwardWait:
			PORTC = 0x00;	
 316:	18 b8       	out	0x08, r1	; 8
			vTaskDelay(200);
 318:	88 ec       	ldi	r24, 0xC8	; 200
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	62 d4       	rcall	.+2244   	; 0xbe2 <vTaskDelay>
			break;
		//trackData = setData;
	}
	//Transitions
	switch(moveMouse){
 31e:	e0 91 50 07 	lds	r30, 0x0750	; 0x800750 <moveMouse>
 322:	8e 2f       	mov	r24, r30
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	89 30       	cpi	r24, 0x09	; 9
 328:	91 05       	cpc	r25, r1
 32a:	b8 f5       	brcc	.+110    	; 0x39a <MOVE_Tick+0xe0>
 32c:	fc 01       	movw	r30, r24
 32e:	e1 5b       	subi	r30, 0xB1	; 177
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	27 c5       	rjmp	.+2638   	; 0xd82 <__tablejump2__>
		case INIT:
			//moveMouse = waitStart;
			moveMouse = forward;
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
			break;
 33a:	08 95       	ret
		case waitStart:
			//moveMouse = check;
			moveMouse = forward;
 33c:	86 e0       	ldi	r24, 0x06	; 6
 33e:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
			break;
 342:	08 95       	ret
		case check: ;
			int r = rand()%3;
 344:	82 d5       	rcall	.+2820   	; 0xe4a <rand>
 346:	63 e0       	ldi	r22, 0x03	; 3
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	08 d5       	rcall	.+2576   	; 0xd5c <__divmodhi4>
			if(r == 0){
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	21 f4       	brne	.+8      	; 0x358 <MOVE_Tick+0x9e>
				moveMouse = left;
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
 356:	08 95       	ret
			}
			else if(r == 1){
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	21 f4       	brne	.+8      	; 0x364 <MOVE_Tick+0xaa>
				moveMouse = right;
 35c:	84 e0       	ldi	r24, 0x04	; 4
 35e:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
 362:	08 95       	ret
			}
			else{
				moveMouse = forward;
 364:	86 e0       	ldi	r24, 0x06	; 6
 366:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
 36a:	08 95       	ret
			}
			break;
		case left:
			moveMouse = turnWait;
 36c:	87 e0       	ldi	r24, 0x07	; 7
 36e:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
			//moveMouse = right;
			break;
 372:	08 95       	ret
		case right:
			moveMouse = turnWait;
 374:	87 e0       	ldi	r24, 0x07	; 7
 376:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
			break;
 37a:	08 95       	ret
		case turnAround:
			moveMouse = turnWait;
 37c:	87 e0       	ldi	r24, 0x07	; 7
 37e:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
			break;
 382:	08 95       	ret
		case turnWait:
			moveMouse = forward;
 384:	86 e0       	ldi	r24, 0x06	; 6
 386:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
			break;
 38a:	08 95       	ret
		case forward:
			moveMouse = forwardWait;
 38c:	88 e0       	ldi	r24, 0x08	; 8
 38e:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
			//moveMouse = left;
			break;
 392:	08 95       	ret
		case forwardWait:
			moveMouse = check;
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <moveMouse>
 39a:	08 95       	ret

0000039c <MoveSecTask>:
	
	return (ADC);
}

void MOVE_Init(){
	moveMouse = INIT;
 39c:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <moveMouse>
void MoveSecTask()
{
	MOVE_Init();
   for(;;) 
   { 	
	MOVE_Tick();
 3a0:	8c df       	rcall	.-232    	; 0x2ba <MOVE_Tick>
	vTaskDelay(200); 
 3a2:	88 ec       	ldi	r24, 0xC8	; 200
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	1d d4       	rcall	.+2106   	; 0xbe2 <vTaskDelay>
   } 
 3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <MoveSecTask+0x4>

000003aa <StartSecPulse>:
		vTaskDelay(100);	
	}
}*/

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
	xTaskCreate(MoveSecTask, (signed portCHAR *)"MoveSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 3b8:	a1 2c       	mov	r10, r1
 3ba:	b1 2c       	mov	r11, r1
 3bc:	c1 2c       	mov	r12, r1
 3be:	d1 2c       	mov	r13, r1
 3c0:	e1 2c       	mov	r14, r1
 3c2:	f1 2c       	mov	r15, r1
 3c4:	08 2f       	mov	r16, r24
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	45 e5       	ldi	r20, 0x55	; 85
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	66 e0       	ldi	r22, 0x06	; 6
 3d0:	71 e0       	ldi	r23, 0x01	; 1
 3d2:	8e ec       	ldi	r24, 0xCE	; 206
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	a1 d1       	rcall	.+834    	; 0x71a <xTaskGenericCreate>
	//xTaskCreate(TrackSecTask, (signed portCHAR *)"TrackSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
}	
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	df 90       	pop	r13
 3e0:	cf 90       	pop	r12
 3e2:	bf 90       	pop	r11
 3e4:	af 90       	pop	r10
 3e6:	08 95       	ret

000003e8 <main>:
 
int main(void) 
{ 
   DDRA = 0x00; PORTA=0xFF;
 3e8:	11 b8       	out	0x01, r1	; 1
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; 
 3ee:	87 b9       	out	0x07, r24	; 7
   DDRD = 0xFF;
 3f0:	8a b9       	out	0x0a, r24	; 10
   //Start Tasks  
   StartSecPulse(1);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	da df       	rcall	.-76     	; 0x3aa <StartSecPulse>
    //RunSchedular 
   vTaskStartScheduler(); 
 3f6:	84 d2       	rcall	.+1288   	; 0x900 <vTaskStartScheduler>
 
   return 0; 
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	08 95       	ret

000003fe <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 3fe:	31 e1       	ldi	r19, 0x11	; 17
 400:	fc 01       	movw	r30, r24
 402:	30 83       	st	Z, r19
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	22 e2       	ldi	r18, 0x22	; 34
 408:	20 83       	st	Z, r18
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	a3 e3       	ldi	r26, 0x33	; 51
 40e:	a0 83       	st	Z, r26
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	60 83       	st	Z, r22
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	70 83       	st	Z, r23
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	10 82       	st	Z, r1
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	60 e8       	ldi	r22, 0x80	; 128
 420:	60 83       	st	Z, r22
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	10 82       	st	Z, r1
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	62 e0       	ldi	r22, 0x02	; 2
 42a:	60 83       	st	Z, r22
 42c:	31 97       	sbiw	r30, 0x01	; 1
 42e:	63 e0       	ldi	r22, 0x03	; 3
 430:	60 83       	st	Z, r22
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	64 e0       	ldi	r22, 0x04	; 4
 436:	60 83       	st	Z, r22
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	65 e0       	ldi	r22, 0x05	; 5
 43c:	60 83       	st	Z, r22
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	66 e0       	ldi	r22, 0x06	; 6
 442:	60 83       	st	Z, r22
 444:	31 97       	sbiw	r30, 0x01	; 1
 446:	67 e0       	ldi	r22, 0x07	; 7
 448:	60 83       	st	Z, r22
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	68 e0       	ldi	r22, 0x08	; 8
 44e:	60 83       	st	Z, r22
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	69 e0       	ldi	r22, 0x09	; 9
 454:	60 83       	st	Z, r22
 456:	31 97       	sbiw	r30, 0x01	; 1
 458:	60 e1       	ldi	r22, 0x10	; 16
 45a:	60 83       	st	Z, r22
 45c:	31 97       	sbiw	r30, 0x01	; 1
 45e:	30 83       	st	Z, r19
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	32 e1       	ldi	r19, 0x12	; 18
 464:	30 83       	st	Z, r19
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	33 e1       	ldi	r19, 0x13	; 19
 46a:	30 83       	st	Z, r19
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	34 e1       	ldi	r19, 0x14	; 20
 470:	30 83       	st	Z, r19
 472:	31 97       	sbiw	r30, 0x01	; 1
 474:	35 e1       	ldi	r19, 0x15	; 21
 476:	30 83       	st	Z, r19
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	36 e1       	ldi	r19, 0x16	; 22
 47c:	30 83       	st	Z, r19
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	37 e1       	ldi	r19, 0x17	; 23
 482:	30 83       	st	Z, r19
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	38 e1       	ldi	r19, 0x18	; 24
 488:	30 83       	st	Z, r19
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	39 e1       	ldi	r19, 0x19	; 25
 48e:	30 83       	st	Z, r19
 490:	31 97       	sbiw	r30, 0x01	; 1
 492:	30 e2       	ldi	r19, 0x20	; 32
 494:	30 83       	st	Z, r19
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	31 e2       	ldi	r19, 0x21	; 33
 49a:	30 83       	st	Z, r19
 49c:	31 97       	sbiw	r30, 0x01	; 1
 49e:	20 83       	st	Z, r18
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	23 e2       	ldi	r18, 0x23	; 35
 4a4:	20 83       	st	Z, r18
 4a6:	31 97       	sbiw	r30, 0x01	; 1
 4a8:	40 83       	st	Z, r20
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	50 83       	st	Z, r21
 4ae:	31 97       	sbiw	r30, 0x01	; 1
 4b0:	26 e2       	ldi	r18, 0x26	; 38
 4b2:	20 83       	st	Z, r18
 4b4:	31 97       	sbiw	r30, 0x01	; 1
 4b6:	27 e2       	ldi	r18, 0x27	; 39
 4b8:	20 83       	st	Z, r18
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	28 e2       	ldi	r18, 0x28	; 40
 4be:	20 83       	st	Z, r18
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	29 e2       	ldi	r18, 0x29	; 41
 4c4:	20 83       	st	Z, r18
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	20 e3       	ldi	r18, 0x30	; 48
 4ca:	20 83       	st	Z, r18
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	21 e3       	ldi	r18, 0x31	; 49
 4d0:	20 83       	st	Z, r18
 4d2:	86 97       	sbiw	r24, 0x26	; 38
 4d4:	08 95       	ret

000004d6 <xPortStartScheduler>:
 4d6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4da:	8c e7       	ldi	r24, 0x7C	; 124
 4dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4e0:	8b e0       	ldi	r24, 0x0B	; 11
 4e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4e6:	ef e6       	ldi	r30, 0x6F	; 111
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	80 83       	st	Z, r24
 4f0:	a0 91 4e 07 	lds	r26, 0x074E	; 0x80074e <pxCurrentTCB>
 4f4:	b0 91 4f 07 	lds	r27, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 4f8:	cd 91       	ld	r28, X+
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	dd 91       	ld	r29, X+
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	ff 91       	pop	r31
 502:	ef 91       	pop	r30
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	bf 91       	pop	r27
 50a:	af 91       	pop	r26
 50c:	9f 91       	pop	r25
 50e:	8f 91       	pop	r24
 510:	7f 91       	pop	r23
 512:	6f 91       	pop	r22
 514:	5f 91       	pop	r21
 516:	4f 91       	pop	r20
 518:	3f 91       	pop	r19
 51a:	2f 91       	pop	r18
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	bf 90       	pop	r11
 52a:	af 90       	pop	r10
 52c:	9f 90       	pop	r9
 52e:	8f 90       	pop	r8
 530:	7f 90       	pop	r7
 532:	6f 90       	pop	r6
 534:	5f 90       	pop	r5
 536:	4f 90       	pop	r4
 538:	3f 90       	pop	r3
 53a:	2f 90       	pop	r2
 53c:	1f 90       	pop	r1
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	08 95       	ret
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	08 95       	ret

0000054a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 54a:	0f 92       	push	r0
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	0f 92       	push	r0
 552:	1f 92       	push	r1
 554:	11 24       	eor	r1, r1
 556:	2f 92       	push	r2
 558:	3f 92       	push	r3
 55a:	4f 92       	push	r4
 55c:	5f 92       	push	r5
 55e:	6f 92       	push	r6
 560:	7f 92       	push	r7
 562:	8f 92       	push	r8
 564:	9f 92       	push	r9
 566:	af 92       	push	r10
 568:	bf 92       	push	r11
 56a:	cf 92       	push	r12
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	2f 93       	push	r18
 578:	3f 93       	push	r19
 57a:	4f 93       	push	r20
 57c:	5f 93       	push	r21
 57e:	6f 93       	push	r22
 580:	7f 93       	push	r23
 582:	8f 93       	push	r24
 584:	9f 93       	push	r25
 586:	af 93       	push	r26
 588:	bf 93       	push	r27
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	ef 93       	push	r30
 590:	ff 93       	push	r31
 592:	a0 91 4e 07 	lds	r26, 0x074E	; 0x80074e <pxCurrentTCB>
 596:	b0 91 4f 07 	lds	r27, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 59a:	0d b6       	in	r0, 0x3d	; 61
 59c:	0d 92       	st	X+, r0
 59e:	0e b6       	in	r0, 0x3e	; 62
 5a0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 5a2:	70 d3       	rcall	.+1760   	; 0xc84 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 5a4:	a0 91 4e 07 	lds	r26, 0x074E	; 0x80074e <pxCurrentTCB>
 5a8:	b0 91 4f 07 	lds	r27, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 5ac:	cd 91       	ld	r28, X+
 5ae:	cd bf       	out	0x3d, r28	; 61
 5b0:	dd 91       	ld	r29, X+
 5b2:	de bf       	out	0x3e, r29	; 62
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	bf 91       	pop	r27
 5be:	af 91       	pop	r26
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	7f 91       	pop	r23
 5c6:	6f 91       	pop	r22
 5c8:	5f 91       	pop	r21
 5ca:	4f 91       	pop	r20
 5cc:	3f 91       	pop	r19
 5ce:	2f 91       	pop	r18
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	df 90       	pop	r13
 5da:	cf 90       	pop	r12
 5dc:	bf 90       	pop	r11
 5de:	af 90       	pop	r10
 5e0:	9f 90       	pop	r9
 5e2:	8f 90       	pop	r8
 5e4:	7f 90       	pop	r7
 5e6:	6f 90       	pop	r6
 5e8:	5f 90       	pop	r5
 5ea:	4f 90       	pop	r4
 5ec:	3f 90       	pop	r3
 5ee:	2f 90       	pop	r2
 5f0:	1f 90       	pop	r1
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0

	asm volatile ( "ret" );
 5f8:	08 95       	ret

000005fa <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 5fa:	0f 92       	push	r0
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	0f 92       	push	r0
 602:	1f 92       	push	r1
 604:	11 24       	eor	r1, r1
 606:	2f 92       	push	r2
 608:	3f 92       	push	r3
 60a:	4f 92       	push	r4
 60c:	5f 92       	push	r5
 60e:	6f 92       	push	r6
 610:	7f 92       	push	r7
 612:	8f 92       	push	r8
 614:	9f 92       	push	r9
 616:	af 92       	push	r10
 618:	bf 92       	push	r11
 61a:	cf 92       	push	r12
 61c:	df 92       	push	r13
 61e:	ef 92       	push	r14
 620:	ff 92       	push	r15
 622:	0f 93       	push	r16
 624:	1f 93       	push	r17
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	ef 93       	push	r30
 640:	ff 93       	push	r31
 642:	a0 91 4e 07 	lds	r26, 0x074E	; 0x80074e <pxCurrentTCB>
 646:	b0 91 4f 07 	lds	r27, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 64a:	0d b6       	in	r0, 0x3d	; 61
 64c:	0d 92       	st	X+, r0
 64e:	0e b6       	in	r0, 0x3e	; 62
 650:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 652:	85 d1       	rcall	.+778    	; 0x95e <vTaskIncrementTick>
	vTaskSwitchContext();
 654:	17 d3       	rcall	.+1582   	; 0xc84 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 656:	a0 91 4e 07 	lds	r26, 0x074E	; 0x80074e <pxCurrentTCB>
 65a:	b0 91 4f 07 	lds	r27, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 65e:	cd 91       	ld	r28, X+
 660:	cd bf       	out	0x3d, r28	; 61
 662:	dd 91       	ld	r29, X+
 664:	de bf       	out	0x3e, r29	; 62
 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	bf 91       	pop	r27
 670:	af 91       	pop	r26
 672:	9f 91       	pop	r25
 674:	8f 91       	pop	r24
 676:	7f 91       	pop	r23
 678:	6f 91       	pop	r22
 67a:	5f 91       	pop	r21
 67c:	4f 91       	pop	r20
 67e:	3f 91       	pop	r19
 680:	2f 91       	pop	r18
 682:	1f 91       	pop	r17
 684:	0f 91       	pop	r16
 686:	ff 90       	pop	r15
 688:	ef 90       	pop	r14
 68a:	df 90       	pop	r13
 68c:	cf 90       	pop	r12
 68e:	bf 90       	pop	r11
 690:	af 90       	pop	r10
 692:	9f 90       	pop	r9
 694:	8f 90       	pop	r8
 696:	7f 90       	pop	r7
 698:	6f 90       	pop	r6
 69a:	5f 90       	pop	r5
 69c:	4f 90       	pop	r4
 69e:	3f 90       	pop	r3
 6a0:	2f 90       	pop	r2
 6a2:	1f 90       	pop	r1
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0

	asm volatile ( "ret" );
 6aa:	08 95       	ret

000006ac <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 6ac:	a6 df       	rcall	.-180    	; 0x5fa <vPortYieldFromTick>
		asm volatile ( "reti" );
 6ae:	18 95       	reti

000006b0 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	ec 01       	movw	r28, r24
 6b6:	e0 91 4e 07 	lds	r30, 0x074E	; 0x80074e <pxCurrentTCB>
 6ba:	f0 91 4f 07 	lds	r31, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 6be:	93 83       	std	Z+3, r25	; 0x03
 6c0:	82 83       	std	Z+2, r24	; 0x02
 6c2:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <xTickCount>
 6c6:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <xTickCount+0x1>
 6ca:	c8 17       	cp	r28, r24
 6cc:	d9 07       	cpc	r29, r25
 6ce:	60 f4       	brcc	.+24     	; 0x6e8 <prvAddCurrentTaskToDelayedList+0x38>
 6d0:	60 91 4e 07 	lds	r22, 0x074E	; 0x80074e <pxCurrentTCB>
 6d4:	70 91 4f 07 	lds	r23, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 6d8:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <pxOverflowDelayedTaskList>
 6dc:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <pxOverflowDelayedTaskList+0x1>
 6e0:	6e 5f       	subi	r22, 0xFE	; 254
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	74 dd       	rcall	.-1304   	; 0x1ce <vListInsert>
 6e6:	16 c0       	rjmp	.+44     	; 0x714 <prvAddCurrentTaskToDelayedList+0x64>
 6e8:	60 91 4e 07 	lds	r22, 0x074E	; 0x80074e <pxCurrentTCB>
 6ec:	70 91 4f 07 	lds	r23, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 6f0:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <pxDelayedTaskList>
 6f4:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <pxDelayedTaskList+0x1>
 6f8:	6e 5f       	subi	r22, 0xFE	; 254
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	68 dd       	rcall	.-1328   	; 0x1ce <vListInsert>
 6fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xNextTaskUnblockTime>
 702:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xNextTaskUnblockTime+0x1>
 706:	c8 17       	cp	r28, r24
 708:	d9 07       	cpc	r29, r25
 70a:	20 f4       	brcc	.+8      	; 0x714 <prvAddCurrentTaskToDelayedList+0x64>
 70c:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <xNextTaskUnblockTime+0x1>
 710:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <xNextTaskUnblockTime>
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <xTaskGenericCreate>:
 71a:	4f 92       	push	r4
 71c:	5f 92       	push	r5
 71e:	6f 92       	push	r6
 720:	7f 92       	push	r7
 722:	8f 92       	push	r8
 724:	9f 92       	push	r9
 726:	af 92       	push	r10
 728:	bf 92       	push	r11
 72a:	cf 92       	push	r12
 72c:	df 92       	push	r13
 72e:	ef 92       	push	r14
 730:	ff 92       	push	r15
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	5c 01       	movw	r10, r24
 73c:	4b 01       	movw	r8, r22
 73e:	3a 01       	movw	r6, r20
 740:	29 01       	movw	r4, r18
 742:	81 e2       	ldi	r24, 0x21	; 33
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	e5 dc       	rcall	.-1590   	; 0x112 <pvPortMalloc>
 748:	ec 01       	movw	r28, r24
 74a:	89 2b       	or	r24, r25
 74c:	09 f4       	brne	.+2      	; 0x750 <xTaskGenericCreate+0x36>
 74e:	c6 c0       	rjmp	.+396    	; 0x8dc <xTaskGenericCreate+0x1c2>
 750:	c1 14       	cp	r12, r1
 752:	d1 04       	cpc	r13, r1
 754:	09 f0       	breq	.+2      	; 0x758 <xTaskGenericCreate+0x3e>
 756:	be c0       	rjmp	.+380    	; 0x8d4 <xTaskGenericCreate+0x1ba>
 758:	c3 01       	movw	r24, r6
 75a:	db dc       	rcall	.-1610   	; 0x112 <pvPortMalloc>
 75c:	98 8f       	std	Y+24, r25	; 0x18
 75e:	8f 8b       	std	Y+23, r24	; 0x17
 760:	00 97       	sbiw	r24, 0x00	; 0
 762:	19 f4       	brne	.+6      	; 0x76a <xTaskGenericCreate+0x50>
 764:	ce 01       	movw	r24, r28
 766:	f9 dc       	rcall	.-1550   	; 0x15a <vPortFree>
 768:	b9 c0       	rjmp	.+370    	; 0x8dc <xTaskGenericCreate+0x1c2>
 76a:	a3 01       	movw	r20, r6
 76c:	65 ea       	ldi	r22, 0xA5	; 165
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	7a d3       	rcall	.+1780   	; 0xe66 <memset>
 772:	93 01       	movw	r18, r6
 774:	21 50       	subi	r18, 0x01	; 1
 776:	31 09       	sbc	r19, r1
 778:	8f 89       	ldd	r24, Y+23	; 0x17
 77a:	98 8d       	ldd	r25, Y+24	; 0x18
 77c:	3c 01       	movw	r6, r24
 77e:	62 0e       	add	r6, r18
 780:	73 1e       	adc	r7, r19
 782:	48 e0       	ldi	r20, 0x08	; 8
 784:	50 e0       	ldi	r21, 0x00	; 0
 786:	b4 01       	movw	r22, r8
 788:	ce 01       	movw	r24, r28
 78a:	49 96       	adiw	r24, 0x19	; 25
 78c:	73 d3       	rcall	.+1766   	; 0xe74 <strncpy>
 78e:	18 a2       	std	Y+32, r1	; 0x20
 790:	10 2f       	mov	r17, r16
 792:	04 30       	cpi	r16, 0x04	; 4
 794:	08 f0       	brcs	.+2      	; 0x798 <xTaskGenericCreate+0x7e>
 796:	13 e0       	ldi	r17, 0x03	; 3
 798:	1e 8b       	std	Y+22, r17	; 0x16
 79a:	6e 01       	movw	r12, r28
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	c8 0e       	add	r12, r24
 7a0:	d1 1c       	adc	r13, r1
 7a2:	c6 01       	movw	r24, r12
 7a4:	e9 dc       	rcall	.-1582   	; 0x178 <vListInitialiseItem>
 7a6:	ce 01       	movw	r24, r28
 7a8:	0c 96       	adiw	r24, 0x0c	; 12
 7aa:	e6 dc       	rcall	.-1588   	; 0x178 <vListInitialiseItem>
 7ac:	d9 87       	std	Y+9, r29	; 0x09
 7ae:	c8 87       	std	Y+8, r28	; 0x08
 7b0:	84 e0       	ldi	r24, 0x04	; 4
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	81 1b       	sub	r24, r17
 7b6:	91 09       	sbc	r25, r1
 7b8:	9d 87       	std	Y+13, r25	; 0x0d
 7ba:	8c 87       	std	Y+12, r24	; 0x0c
 7bc:	db 8b       	std	Y+19, r29	; 0x13
 7be:	ca 8b       	std	Y+18, r28	; 0x12
 7c0:	a2 01       	movw	r20, r4
 7c2:	b5 01       	movw	r22, r10
 7c4:	c3 01       	movw	r24, r6
 7c6:	1b de       	rcall	.-970    	; 0x3fe <pxPortInitialiseStack>
 7c8:	99 83       	std	Y+1, r25	; 0x01
 7ca:	88 83       	st	Y, r24
 7cc:	e1 14       	cp	r14, r1
 7ce:	f1 04       	cpc	r15, r1
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <xTaskGenericCreate+0xbe>
 7d2:	f7 01       	movw	r30, r14
 7d4:	d1 83       	std	Z+1, r29	; 0x01
 7d6:	c0 83       	st	Z, r28
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	f8 94       	cli
 7dc:	0f 92       	push	r0
 7de:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxCurrentNumberOfTasks>
 7e2:	8f 5f       	subi	r24, 0xFF	; 255
 7e4:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <uxCurrentNumberOfTasks>
 7e8:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <pxCurrentTCB>
 7ec:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 7f0:	89 2b       	or	r24, r25
 7f2:	69 f5       	brne	.+90     	; 0x84e <xTaskGenericCreate+0x134>
 7f4:	d0 93 4f 07 	sts	0x074F, r29	; 0x80074f <pxCurrentTCB+0x1>
 7f8:	c0 93 4e 07 	sts	0x074E, r28	; 0x80074e <pxCurrentTCB>
 7fc:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxCurrentNumberOfTasks>
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	a1 f5       	brne	.+104    	; 0x86c <xTaskGenericCreate+0x152>
 804:	8a e2       	ldi	r24, 0x2A	; 42
 806:	97 e0       	ldi	r25, 0x07	; 7
 808:	a9 dc       	rcall	.-1710   	; 0x15c <vListInitialise>
 80a:	83 e3       	ldi	r24, 0x33	; 51
 80c:	97 e0       	ldi	r25, 0x07	; 7
 80e:	a6 dc       	rcall	.-1716   	; 0x15c <vListInitialise>
 810:	8c e3       	ldi	r24, 0x3C	; 60
 812:	97 e0       	ldi	r25, 0x07	; 7
 814:	a3 dc       	rcall	.-1722   	; 0x15c <vListInitialise>
 816:	85 e4       	ldi	r24, 0x45	; 69
 818:	97 e0       	ldi	r25, 0x07	; 7
 81a:	a0 dc       	rcall	.-1728   	; 0x15c <vListInitialise>
 81c:	81 e2       	ldi	r24, 0x21	; 33
 81e:	97 e0       	ldi	r25, 0x07	; 7
 820:	9d dc       	rcall	.-1734   	; 0x15c <vListInitialise>
 822:	88 e1       	ldi	r24, 0x18	; 24
 824:	97 e0       	ldi	r25, 0x07	; 7
 826:	9a dc       	rcall	.-1740   	; 0x15c <vListInitialise>
 828:	8b e0       	ldi	r24, 0x0B	; 11
 82a:	97 e0       	ldi	r25, 0x07	; 7
 82c:	97 dc       	rcall	.-1746   	; 0x15c <vListInitialise>
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	97 e0       	ldi	r25, 0x07	; 7
 832:	94 dc       	rcall	.-1752   	; 0x15c <vListInitialise>
 834:	81 e2       	ldi	r24, 0x21	; 33
 836:	97 e0       	ldi	r25, 0x07	; 7
 838:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <pxDelayedTaskList+0x1>
 83c:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <pxDelayedTaskList>
 840:	88 e1       	ldi	r24, 0x18	; 24
 842:	97 e0       	ldi	r25, 0x07	; 7
 844:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <pxOverflowDelayedTaskList+0x1>
 848:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <pxOverflowDelayedTaskList>
 84c:	0f c0       	rjmp	.+30     	; 0x86c <xTaskGenericCreate+0x152>
 84e:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xSchedulerRunning>
 852:	81 11       	cpse	r24, r1
 854:	0b c0       	rjmp	.+22     	; 0x86c <xTaskGenericCreate+0x152>
 856:	e0 91 4e 07 	lds	r30, 0x074E	; 0x80074e <pxCurrentTCB>
 85a:	f0 91 4f 07 	lds	r31, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 85e:	86 89       	ldd	r24, Z+22	; 0x16
 860:	08 17       	cp	r16, r24
 862:	20 f0       	brcs	.+8      	; 0x86c <xTaskGenericCreate+0x152>
 864:	d0 93 4f 07 	sts	0x074F, r29	; 0x80074f <pxCurrentTCB+0x1>
 868:	c0 93 4e 07 	sts	0x074E, r28	; 0x80074e <pxCurrentTCB>
 86c:	8e 89       	ldd	r24, Y+22	; 0x16
 86e:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <uxTopUsedPriority>
 872:	98 17       	cp	r25, r24
 874:	10 f4       	brcc	.+4      	; 0x87a <xTaskGenericCreate+0x160>
 876:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxTopUsedPriority>
 87a:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <uxTaskNumber>
 87e:	9f 5f       	subi	r25, 0xFF	; 255
 880:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <uxTaskNumber>
 884:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 888:	98 17       	cp	r25, r24
 88a:	10 f4       	brcc	.+4      	; 0x890 <xTaskGenericCreate+0x176>
 88c:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxTopReadyPriority>
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	9c 01       	movw	r18, r24
 894:	22 0f       	add	r18, r18
 896:	33 1f       	adc	r19, r19
 898:	22 0f       	add	r18, r18
 89a:	33 1f       	adc	r19, r19
 89c:	22 0f       	add	r18, r18
 89e:	33 1f       	adc	r19, r19
 8a0:	82 0f       	add	r24, r18
 8a2:	93 1f       	adc	r25, r19
 8a4:	b6 01       	movw	r22, r12
 8a6:	86 5d       	subi	r24, 0xD6	; 214
 8a8:	98 4f       	sbci	r25, 0xF8	; 248
 8aa:	6a dc       	rcall	.-1836   	; 0x180 <vListInsertEnd>
 8ac:	0f 90       	pop	r0
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xSchedulerRunning>
 8b4:	88 23       	and	r24, r24
 8b6:	51 f0       	breq	.+20     	; 0x8cc <xTaskGenericCreate+0x1b2>
 8b8:	e0 91 4e 07 	lds	r30, 0x074E	; 0x80074e <pxCurrentTCB>
 8bc:	f0 91 4f 07 	lds	r31, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 8c0:	86 89       	ldd	r24, Z+22	; 0x16
 8c2:	80 17       	cp	r24, r16
 8c4:	28 f4       	brcc	.+10     	; 0x8d0 <xTaskGenericCreate+0x1b6>
 8c6:	41 de       	rcall	.-894    	; 0x54a <vPortYield>
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <xTaskGenericCreate+0x1c4>
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	07 c0       	rjmp	.+14     	; 0x8de <xTaskGenericCreate+0x1c4>
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <xTaskGenericCreate+0x1c4>
 8d4:	d8 8e       	std	Y+24, r13	; 0x18
 8d6:	cf 8a       	std	Y+23, r12	; 0x17
 8d8:	c6 01       	movw	r24, r12
 8da:	47 cf       	rjmp	.-370    	; 0x76a <xTaskGenericCreate+0x50>
 8dc:	8f ef       	ldi	r24, 0xFF	; 255
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	1f 91       	pop	r17
 8e4:	0f 91       	pop	r16
 8e6:	ff 90       	pop	r15
 8e8:	ef 90       	pop	r14
 8ea:	df 90       	pop	r13
 8ec:	cf 90       	pop	r12
 8ee:	bf 90       	pop	r11
 8f0:	af 90       	pop	r10
 8f2:	9f 90       	pop	r9
 8f4:	8f 90       	pop	r8
 8f6:	7f 90       	pop	r7
 8f8:	6f 90       	pop	r6
 8fa:	5f 90       	pop	r5
 8fc:	4f 90       	pop	r4
 8fe:	08 95       	ret

00000900 <vTaskStartScheduler>:
 900:	af 92       	push	r10
 902:	bf 92       	push	r11
 904:	cf 92       	push	r12
 906:	df 92       	push	r13
 908:	ef 92       	push	r14
 90a:	ff 92       	push	r15
 90c:	0f 93       	push	r16
 90e:	a1 2c       	mov	r10, r1
 910:	b1 2c       	mov	r11, r1
 912:	c1 2c       	mov	r12, r1
 914:	d1 2c       	mov	r13, r1
 916:	e1 2c       	mov	r14, r1
 918:	f1 2c       	mov	r15, r1
 91a:	00 e0       	ldi	r16, 0x00	; 0
 91c:	20 e0       	ldi	r18, 0x00	; 0
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	45 e5       	ldi	r20, 0x55	; 85
 922:	50 e0       	ldi	r21, 0x00	; 0
 924:	62 e1       	ldi	r22, 0x12	; 18
 926:	71 e0       	ldi	r23, 0x01	; 1
 928:	8c e0       	ldi	r24, 0x0C	; 12
 92a:	96 e0       	ldi	r25, 0x06	; 6
 92c:	f6 de       	rcall	.-532    	; 0x71a <xTaskGenericCreate>
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	41 f4       	brne	.+16     	; 0x942 <vTaskStartScheduler+0x42>
 932:	f8 94       	cli
 934:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <xSchedulerRunning>
 938:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <xTickCount+0x1>
 93c:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <xTickCount>
 940:	ca dd       	rcall	.-1132   	; 0x4d6 <xPortStartScheduler>
 942:	0f 91       	pop	r16
 944:	ff 90       	pop	r15
 946:	ef 90       	pop	r14
 948:	df 90       	pop	r13
 94a:	cf 90       	pop	r12
 94c:	bf 90       	pop	r11
 94e:	af 90       	pop	r10
 950:	08 95       	ret

00000952 <vTaskSuspendAll>:
 952:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxSchedulerSuspended>
 956:	8f 5f       	subi	r24, 0xFF	; 255
 958:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxSchedulerSuspended>
 95c:	08 95       	ret

0000095e <vTaskIncrementTick>:
 95e:	0f 93       	push	r16
 960:	1f 93       	push	r17
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxSchedulerSuspended>
 96a:	81 11       	cpse	r24, r1
 96c:	af c0       	rjmp	.+350    	; 0xacc <vTaskIncrementTick+0x16e>
 96e:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <xTickCount>
 972:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <xTickCount+0x1>
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	90 93 ff 06 	sts	0x06FF, r25	; 0x8006ff <xTickCount+0x1>
 97c:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <xTickCount>
 980:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <xTickCount>
 984:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <xTickCount+0x1>
 988:	89 2b       	or	r24, r25
 98a:	99 f5       	brne	.+102    	; 0x9f2 <vTaskIncrementTick+0x94>
 98c:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <pxDelayedTaskList>
 990:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <pxDelayedTaskList+0x1>
 994:	20 91 14 07 	lds	r18, 0x0714	; 0x800714 <pxOverflowDelayedTaskList>
 998:	30 91 15 07 	lds	r19, 0x0715	; 0x800715 <pxOverflowDelayedTaskList+0x1>
 99c:	30 93 17 07 	sts	0x0717, r19	; 0x800717 <pxDelayedTaskList+0x1>
 9a0:	20 93 16 07 	sts	0x0716, r18	; 0x800716 <pxDelayedTaskList>
 9a4:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <pxOverflowDelayedTaskList+0x1>
 9a8:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <pxOverflowDelayedTaskList>
 9ac:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xNumOfOverflows>
 9b0:	8f 5f       	subi	r24, 0xFF	; 255
 9b2:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xNumOfOverflows>
 9b6:	e0 91 16 07 	lds	r30, 0x0716	; 0x800716 <pxDelayedTaskList>
 9ba:	f0 91 17 07 	lds	r31, 0x0717	; 0x800717 <pxDelayedTaskList+0x1>
 9be:	80 81       	ld	r24, Z
 9c0:	81 11       	cpse	r24, r1
 9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <vTaskIncrementTick+0x74>
 9c4:	8f ef       	ldi	r24, 0xFF	; 255
 9c6:	9f ef       	ldi	r25, 0xFF	; 255
 9c8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xNextTaskUnblockTime+0x1>
 9cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xNextTaskUnblockTime>
 9d0:	10 c0       	rjmp	.+32     	; 0x9f2 <vTaskIncrementTick+0x94>
 9d2:	e0 91 16 07 	lds	r30, 0x0716	; 0x800716 <pxDelayedTaskList>
 9d6:	f0 91 17 07 	lds	r31, 0x0717	; 0x800717 <pxDelayedTaskList+0x1>
 9da:	05 80       	ldd	r0, Z+5	; 0x05
 9dc:	f6 81       	ldd	r31, Z+6	; 0x06
 9de:	e0 2d       	mov	r30, r0
 9e0:	06 80       	ldd	r0, Z+6	; 0x06
 9e2:	f7 81       	ldd	r31, Z+7	; 0x07
 9e4:	e0 2d       	mov	r30, r0
 9e6:	82 81       	ldd	r24, Z+2	; 0x02
 9e8:	93 81       	ldd	r25, Z+3	; 0x03
 9ea:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xNextTaskUnblockTime+0x1>
 9ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xNextTaskUnblockTime>
 9f2:	20 91 fe 06 	lds	r18, 0x06FE	; 0x8006fe <xTickCount>
 9f6:	30 91 ff 06 	lds	r19, 0x06FF	; 0x8006ff <xTickCount+0x1>
 9fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xNextTaskUnblockTime>
 9fe:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xNextTaskUnblockTime+0x1>
 a02:	28 17       	cp	r18, r24
 a04:	39 07       	cpc	r19, r25
 a06:	08 f4       	brcc	.+2      	; 0xa0a <vTaskIncrementTick+0xac>
 a08:	66 c0       	rjmp	.+204    	; 0xad6 <vTaskIncrementTick+0x178>
 a0a:	e0 91 16 07 	lds	r30, 0x0716	; 0x800716 <pxDelayedTaskList>
 a0e:	f0 91 17 07 	lds	r31, 0x0717	; 0x800717 <pxDelayedTaskList+0x1>
 a12:	80 81       	ld	r24, Z
 a14:	88 23       	and	r24, r24
 a16:	99 f0       	breq	.+38     	; 0xa3e <vTaskIncrementTick+0xe0>
 a18:	e0 91 16 07 	lds	r30, 0x0716	; 0x800716 <pxDelayedTaskList>
 a1c:	f0 91 17 07 	lds	r31, 0x0717	; 0x800717 <pxDelayedTaskList+0x1>
 a20:	05 80       	ldd	r0, Z+5	; 0x05
 a22:	f6 81       	ldd	r31, Z+6	; 0x06
 a24:	e0 2d       	mov	r30, r0
 a26:	c6 81       	ldd	r28, Z+6	; 0x06
 a28:	d7 81       	ldd	r29, Z+7	; 0x07
 a2a:	8a 81       	ldd	r24, Y+2	; 0x02
 a2c:	9b 81       	ldd	r25, Y+3	; 0x03
 a2e:	20 91 fe 06 	lds	r18, 0x06FE	; 0x8006fe <xTickCount>
 a32:	30 91 ff 06 	lds	r19, 0x06FF	; 0x8006ff <xTickCount+0x1>
 a36:	28 17       	cp	r18, r24
 a38:	39 07       	cpc	r19, r25
 a3a:	f8 f4       	brcc	.+62     	; 0xa7a <vTaskIncrementTick+0x11c>
 a3c:	19 c0       	rjmp	.+50     	; 0xa70 <vTaskIncrementTick+0x112>
 a3e:	8f ef       	ldi	r24, 0xFF	; 255
 a40:	9f ef       	ldi	r25, 0xFF	; 255
 a42:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xNextTaskUnblockTime+0x1>
 a46:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xNextTaskUnblockTime>
 a4a:	45 c0       	rjmp	.+138    	; 0xad6 <vTaskIncrementTick+0x178>
 a4c:	e0 91 16 07 	lds	r30, 0x0716	; 0x800716 <pxDelayedTaskList>
 a50:	f0 91 17 07 	lds	r31, 0x0717	; 0x800717 <pxDelayedTaskList+0x1>
 a54:	05 80       	ldd	r0, Z+5	; 0x05
 a56:	f6 81       	ldd	r31, Z+6	; 0x06
 a58:	e0 2d       	mov	r30, r0
 a5a:	c6 81       	ldd	r28, Z+6	; 0x06
 a5c:	d7 81       	ldd	r29, Z+7	; 0x07
 a5e:	8a 81       	ldd	r24, Y+2	; 0x02
 a60:	9b 81       	ldd	r25, Y+3	; 0x03
 a62:	20 91 fe 06 	lds	r18, 0x06FE	; 0x8006fe <xTickCount>
 a66:	30 91 ff 06 	lds	r19, 0x06FF	; 0x8006ff <xTickCount+0x1>
 a6a:	28 17       	cp	r18, r24
 a6c:	39 07       	cpc	r19, r25
 a6e:	28 f4       	brcc	.+10     	; 0xa7a <vTaskIncrementTick+0x11c>
 a70:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xNextTaskUnblockTime+0x1>
 a74:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xNextTaskUnblockTime>
 a78:	2e c0       	rjmp	.+92     	; 0xad6 <vTaskIncrementTick+0x178>
 a7a:	8e 01       	movw	r16, r28
 a7c:	0e 5f       	subi	r16, 0xFE	; 254
 a7e:	1f 4f       	sbci	r17, 0xFF	; 255
 a80:	c8 01       	movw	r24, r16
 a82:	e0 db       	rcall	.-2112   	; 0x244 <vListRemove>
 a84:	8c 89       	ldd	r24, Y+20	; 0x14
 a86:	9d 89       	ldd	r25, Y+21	; 0x15
 a88:	89 2b       	or	r24, r25
 a8a:	19 f0       	breq	.+6      	; 0xa92 <vTaskIncrementTick+0x134>
 a8c:	ce 01       	movw	r24, r28
 a8e:	0c 96       	adiw	r24, 0x0c	; 12
 a90:	d9 db       	rcall	.-2126   	; 0x244 <vListRemove>
 a92:	2e 89       	ldd	r18, Y+22	; 0x16
 a94:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 a98:	82 17       	cp	r24, r18
 a9a:	10 f4       	brcc	.+4      	; 0xaa0 <vTaskIncrementTick+0x142>
 a9c:	20 93 fc 06 	sts	0x06FC, r18	; 0x8006fc <uxTopReadyPriority>
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	c9 01       	movw	r24, r18
 aa4:	88 0f       	add	r24, r24
 aa6:	99 1f       	adc	r25, r25
 aa8:	88 0f       	add	r24, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	88 0f       	add	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	82 0f       	add	r24, r18
 ab2:	93 1f       	adc	r25, r19
 ab4:	b8 01       	movw	r22, r16
 ab6:	86 5d       	subi	r24, 0xD6	; 214
 ab8:	98 4f       	sbci	r25, 0xF8	; 248
 aba:	62 db       	rcall	.-2364   	; 0x180 <vListInsertEnd>
 abc:	e0 91 16 07 	lds	r30, 0x0716	; 0x800716 <pxDelayedTaskList>
 ac0:	f0 91 17 07 	lds	r31, 0x0717	; 0x800717 <pxDelayedTaskList+0x1>
 ac4:	80 81       	ld	r24, Z
 ac6:	81 11       	cpse	r24, r1
 ac8:	c1 cf       	rjmp	.-126    	; 0xa4c <vTaskIncrementTick+0xee>
 aca:	b9 cf       	rjmp	.-142    	; 0xa3e <vTaskIncrementTick+0xe0>
 acc:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxMissedTicks>
 ad0:	8f 5f       	subi	r24, 0xFF	; 255
 ad2:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxMissedTicks>
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	1f 91       	pop	r17
 adc:	0f 91       	pop	r16
 ade:	08 95       	ret

00000ae0 <xTaskResumeAll>:
 ae0:	cf 92       	push	r12
 ae2:	df 92       	push	r13
 ae4:	ef 92       	push	r14
 ae6:	ff 92       	push	r15
 ae8:	0f 93       	push	r16
 aea:	1f 93       	push	r17
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
 af0:	0f b6       	in	r0, 0x3f	; 63
 af2:	f8 94       	cli
 af4:	0f 92       	push	r0
 af6:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxSchedulerSuspended>
 afa:	81 50       	subi	r24, 0x01	; 1
 afc:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxSchedulerSuspended>
 b00:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxSchedulerSuspended>
 b04:	81 11       	cpse	r24, r1
 b06:	5f c0       	rjmp	.+190    	; 0xbc6 <xTaskResumeAll+0xe6>
 b08:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxCurrentNumberOfTasks>
 b0c:	81 11       	cpse	r24, r1
 b0e:	2f c0       	rjmp	.+94     	; 0xb6e <xTaskResumeAll+0x8e>
 b10:	5d c0       	rjmp	.+186    	; 0xbcc <xTaskResumeAll+0xec>
 b12:	d7 01       	movw	r26, r14
 b14:	15 96       	adiw	r26, 0x05	; 5
 b16:	ed 91       	ld	r30, X+
 b18:	fc 91       	ld	r31, X
 b1a:	16 97       	sbiw	r26, 0x06	; 6
 b1c:	c6 81       	ldd	r28, Z+6	; 0x06
 b1e:	d7 81       	ldd	r29, Z+7	; 0x07
 b20:	ce 01       	movw	r24, r28
 b22:	0c 96       	adiw	r24, 0x0c	; 12
 b24:	8f db       	rcall	.-2274   	; 0x244 <vListRemove>
 b26:	8e 01       	movw	r16, r28
 b28:	0e 5f       	subi	r16, 0xFE	; 254
 b2a:	1f 4f       	sbci	r17, 0xFF	; 255
 b2c:	c8 01       	movw	r24, r16
 b2e:	8a db       	rcall	.-2284   	; 0x244 <vListRemove>
 b30:	2e 89       	ldd	r18, Y+22	; 0x16
 b32:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 b36:	82 17       	cp	r24, r18
 b38:	10 f4       	brcc	.+4      	; 0xb3e <xTaskResumeAll+0x5e>
 b3a:	20 93 fc 06 	sts	0x06FC, r18	; 0x8006fc <uxTopReadyPriority>
 b3e:	30 e0       	ldi	r19, 0x00	; 0
 b40:	c9 01       	movw	r24, r18
 b42:	88 0f       	add	r24, r24
 b44:	99 1f       	adc	r25, r25
 b46:	88 0f       	add	r24, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	88 0f       	add	r24, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	82 0f       	add	r24, r18
 b50:	93 1f       	adc	r25, r19
 b52:	b8 01       	movw	r22, r16
 b54:	86 5d       	subi	r24, 0xD6	; 214
 b56:	98 4f       	sbci	r25, 0xF8	; 248
 b58:	13 db       	rcall	.-2522   	; 0x180 <vListInsertEnd>
 b5a:	e0 91 4e 07 	lds	r30, 0x074E	; 0x80074e <pxCurrentTCB>
 b5e:	f0 91 4f 07 	lds	r31, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 b62:	9e 89       	ldd	r25, Y+22	; 0x16
 b64:	86 89       	ldd	r24, Z+22	; 0x16
 b66:	98 17       	cp	r25, r24
 b68:	58 f0       	brcs	.+22     	; 0xb80 <xTaskResumeAll+0xa0>
 b6a:	dc 2c       	mov	r13, r12
 b6c:	09 c0       	rjmp	.+18     	; 0xb80 <xTaskResumeAll+0xa0>
 b6e:	d1 2c       	mov	r13, r1
 b70:	0f 2e       	mov	r0, r31
 b72:	fb e0       	ldi	r31, 0x0B	; 11
 b74:	ef 2e       	mov	r14, r31
 b76:	f7 e0       	ldi	r31, 0x07	; 7
 b78:	ff 2e       	mov	r15, r31
 b7a:	f0 2d       	mov	r31, r0
 b7c:	cc 24       	eor	r12, r12
 b7e:	c3 94       	inc	r12
 b80:	f7 01       	movw	r30, r14
 b82:	80 81       	ld	r24, Z
 b84:	81 11       	cpse	r24, r1
 b86:	c5 cf       	rjmp	.-118    	; 0xb12 <xTaskResumeAll+0x32>
 b88:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxMissedTicks>
 b8c:	88 23       	and	r24, r24
 b8e:	79 f0       	breq	.+30     	; 0xbae <xTaskResumeAll+0xce>
 b90:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxMissedTicks>
 b94:	88 23       	and	r24, r24
 b96:	91 f0       	breq	.+36     	; 0xbbc <xTaskResumeAll+0xdc>
 b98:	e2 de       	rcall	.-572    	; 0x95e <vTaskIncrementTick>
 b9a:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxMissedTicks>
 b9e:	81 50       	subi	r24, 0x01	; 1
 ba0:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxMissedTicks>
 ba4:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxMissedTicks>
 ba8:	81 11       	cpse	r24, r1
 baa:	f6 cf       	rjmp	.-20     	; 0xb98 <xTaskResumeAll+0xb8>
 bac:	07 c0       	rjmp	.+14     	; 0xbbc <xTaskResumeAll+0xdc>
 bae:	f1 e0       	ldi	r31, 0x01	; 1
 bb0:	df 16       	cp	r13, r31
 bb2:	21 f0       	breq	.+8      	; 0xbbc <xTaskResumeAll+0xdc>
 bb4:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xMissedYield>
 bb8:	81 30       	cpi	r24, 0x01	; 1
 bba:	39 f4       	brne	.+14     	; 0xbca <xTaskResumeAll+0xea>
 bbc:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <xMissedYield>
 bc0:	c4 dc       	rcall	.-1656   	; 0x54a <vPortYield>
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	03 c0       	rjmp	.+6      	; 0xbcc <xTaskResumeAll+0xec>
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	01 c0       	rjmp	.+2      	; 0xbcc <xTaskResumeAll+0xec>
 bca:	80 e0       	ldi	r24, 0x00	; 0
 bcc:	0f 90       	pop	r0
 bce:	0f be       	out	0x3f, r0	; 63
 bd0:	df 91       	pop	r29
 bd2:	cf 91       	pop	r28
 bd4:	1f 91       	pop	r17
 bd6:	0f 91       	pop	r16
 bd8:	ff 90       	pop	r15
 bda:	ef 90       	pop	r14
 bdc:	df 90       	pop	r13
 bde:	cf 90       	pop	r12
 be0:	08 95       	ret

00000be2 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 be2:	cf 93       	push	r28
 be4:	df 93       	push	r29
 be6:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 be8:	89 2b       	or	r24, r25
 bea:	91 f0       	breq	.+36     	; 0xc10 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 bec:	b2 de       	rcall	.-668    	; 0x952 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 bee:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <xTickCount>
 bf2:	90 91 ff 06 	lds	r25, 0x06FF	; 0x8006ff <xTickCount+0x1>
 bf6:	c8 0f       	add	r28, r24
 bf8:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 bfa:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <pxCurrentTCB>
 bfe:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <pxCurrentTCB+0x1>
 c02:	02 96       	adiw	r24, 0x02	; 2
 c04:	1f db       	rcall	.-2498   	; 0x244 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 c06:	ce 01       	movw	r24, r28
 c08:	53 dd       	rcall	.-1370   	; 0x6b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 c0a:	6a df       	rcall	.-300    	; 0xae0 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c0c:	81 11       	cpse	r24, r1
 c0e:	01 c0       	rjmp	.+2      	; 0xc12 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 c10:	9c dc       	rcall	.-1736   	; 0x54a <vPortYield>
		}
	}
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	08 95       	ret

00000c18 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c18:	0f 2e       	mov	r0, r31
 c1a:	f2 e0       	ldi	r31, 0x02	; 2
 c1c:	ef 2e       	mov	r14, r31
 c1e:	f7 e0       	ldi	r31, 0x07	; 7
 c20:	ff 2e       	mov	r15, r31
 c22:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c24:	ca e2       	ldi	r28, 0x2A	; 42
 c26:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c28:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxTasksDeleted>
 c2c:	88 23       	and	r24, r24
 c2e:	29 f1       	breq	.+74     	; 0xc7a <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 c30:	90 de       	rcall	.-736    	; 0x952 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c32:	d7 01       	movw	r26, r14
 c34:	1c 91       	ld	r17, X
			xTaskResumeAll();
 c36:	54 df       	rcall	.-344    	; 0xae0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 c38:	11 23       	and	r17, r17
 c3a:	f9 f0       	breq	.+62     	; 0xc7a <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 c3c:	0f b6       	in	r0, 0x3f	; 63
 c3e:	f8 94       	cli
 c40:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 c42:	d7 01       	movw	r26, r14
 c44:	15 96       	adiw	r26, 0x05	; 5
 c46:	ed 91       	ld	r30, X+
 c48:	fc 91       	ld	r31, X
 c4a:	16 97       	sbiw	r26, 0x06	; 6
 c4c:	06 81       	ldd	r16, Z+6	; 0x06
 c4e:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 c50:	c8 01       	movw	r24, r16
 c52:	02 96       	adiw	r24, 0x02	; 2
 c54:	f7 da       	rcall	.-2578   	; 0x244 <vListRemove>
					--uxCurrentNumberOfTasks;
 c56:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxCurrentNumberOfTasks>
 c5a:	81 50       	subi	r24, 0x01	; 1
 c5c:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 c60:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <uxTasksDeleted>
 c64:	81 50       	subi	r24, 0x01	; 1
 c66:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 c6a:	0f 90       	pop	r0
 c6c:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 c6e:	f8 01       	movw	r30, r16
 c70:	87 89       	ldd	r24, Z+23	; 0x17
 c72:	90 8d       	ldd	r25, Z+24	; 0x18
 c74:	72 da       	rcall	.-2844   	; 0x15a <vPortFree>
		vPortFree( pxTCB );
 c76:	c8 01       	movw	r24, r16
 c78:	70 da       	rcall	.-2848   	; 0x15a <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c7a:	88 81       	ld	r24, Y
 c7c:	82 30       	cpi	r24, 0x02	; 2
 c7e:	a0 f2       	brcs	.-88     	; 0xc28 <prvIdleTask+0x10>
			{
				taskYIELD();
 c80:	64 dc       	rcall	.-1848   	; 0x54a <vPortYield>
 c82:	d2 cf       	rjmp	.-92     	; 0xc28 <prvIdleTask+0x10>

00000c84 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 c84:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxSchedulerSuspended>
 c88:	81 11       	cpse	r24, r1
 c8a:	13 c0       	rjmp	.+38     	; 0xcb2 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c8c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	fc 01       	movw	r30, r24
 c94:	ee 0f       	add	r30, r30
 c96:	ff 1f       	adc	r31, r31
 c98:	ee 0f       	add	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	ee 0f       	add	r30, r30
 c9e:	ff 1f       	adc	r31, r31
 ca0:	8e 0f       	add	r24, r30
 ca2:	9f 1f       	adc	r25, r31
 ca4:	fc 01       	movw	r30, r24
 ca6:	e6 5d       	subi	r30, 0xD6	; 214
 ca8:	f8 4f       	sbci	r31, 0xF8	; 248
 caa:	80 81       	ld	r24, Z
 cac:	88 23       	and	r24, r24
 cae:	29 f0       	breq	.+10     	; 0xcba <vTaskSwitchContext+0x36>
 cb0:	1b c0       	rjmp	.+54     	; 0xce8 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 cb2:	81 e0       	ldi	r24, 0x01	; 1
 cb4:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <xMissedYield>
 cb8:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 cba:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 cbe:	81 50       	subi	r24, 0x01	; 1
 cc0:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cc4:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	fc 01       	movw	r30, r24
 ccc:	ee 0f       	add	r30, r30
 cce:	ff 1f       	adc	r31, r31
 cd0:	ee 0f       	add	r30, r30
 cd2:	ff 1f       	adc	r31, r31
 cd4:	ee 0f       	add	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	8e 0f       	add	r24, r30
 cda:	9f 1f       	adc	r25, r31
 cdc:	fc 01       	movw	r30, r24
 cde:	e6 5d       	subi	r30, 0xD6	; 214
 ce0:	f8 4f       	sbci	r31, 0xF8	; 248
 ce2:	80 81       	ld	r24, Z
 ce4:	88 23       	and	r24, r24
 ce6:	49 f3       	breq	.-46     	; 0xcba <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 ce8:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	9c 01       	movw	r18, r24
 cf0:	22 0f       	add	r18, r18
 cf2:	33 1f       	adc	r19, r19
 cf4:	22 0f       	add	r18, r18
 cf6:	33 1f       	adc	r19, r19
 cf8:	22 0f       	add	r18, r18
 cfa:	33 1f       	adc	r19, r19
 cfc:	28 0f       	add	r18, r24
 cfe:	39 1f       	adc	r19, r25
 d00:	d9 01       	movw	r26, r18
 d02:	a6 5d       	subi	r26, 0xD6	; 214
 d04:	b8 4f       	sbci	r27, 0xF8	; 248
 d06:	11 96       	adiw	r26, 0x01	; 1
 d08:	ed 91       	ld	r30, X+
 d0a:	fc 91       	ld	r31, X
 d0c:	12 97       	sbiw	r26, 0x02	; 2
 d0e:	02 80       	ldd	r0, Z+2	; 0x02
 d10:	f3 81       	ldd	r31, Z+3	; 0x03
 d12:	e0 2d       	mov	r30, r0
 d14:	12 96       	adiw	r26, 0x02	; 2
 d16:	fc 93       	st	X, r31
 d18:	ee 93       	st	-X, r30
 d1a:	11 97       	sbiw	r26, 0x01	; 1
 d1c:	23 5d       	subi	r18, 0xD3	; 211
 d1e:	38 4f       	sbci	r19, 0xF8	; 248
 d20:	e2 17       	cp	r30, r18
 d22:	f3 07       	cpc	r31, r19
 d24:	29 f4       	brne	.+10     	; 0xd30 <vTaskSwitchContext+0xac>
 d26:	22 81       	ldd	r18, Z+2	; 0x02
 d28:	33 81       	ldd	r19, Z+3	; 0x03
 d2a:	fd 01       	movw	r30, r26
 d2c:	32 83       	std	Z+2, r19	; 0x02
 d2e:	21 83       	std	Z+1, r18	; 0x01
 d30:	fc 01       	movw	r30, r24
 d32:	ee 0f       	add	r30, r30
 d34:	ff 1f       	adc	r31, r31
 d36:	ee 0f       	add	r30, r30
 d38:	ff 1f       	adc	r31, r31
 d3a:	ee 0f       	add	r30, r30
 d3c:	ff 1f       	adc	r31, r31
 d3e:	8e 0f       	add	r24, r30
 d40:	9f 1f       	adc	r25, r31
 d42:	fc 01       	movw	r30, r24
 d44:	e6 5d       	subi	r30, 0xD6	; 214
 d46:	f8 4f       	sbci	r31, 0xF8	; 248
 d48:	01 80       	ldd	r0, Z+1	; 0x01
 d4a:	f2 81       	ldd	r31, Z+2	; 0x02
 d4c:	e0 2d       	mov	r30, r0
 d4e:	86 81       	ldd	r24, Z+6	; 0x06
 d50:	97 81       	ldd	r25, Z+7	; 0x07
 d52:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <pxCurrentTCB+0x1>
 d56:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <pxCurrentTCB>
 d5a:	08 95       	ret

00000d5c <__divmodhi4>:
 d5c:	97 fb       	bst	r25, 7
 d5e:	07 2e       	mov	r0, r23
 d60:	16 f4       	brtc	.+4      	; 0xd66 <__divmodhi4+0xa>
 d62:	00 94       	com	r0
 d64:	06 d0       	rcall	.+12     	; 0xd72 <__divmodhi4_neg1>
 d66:	77 fd       	sbrc	r23, 7
 d68:	08 d0       	rcall	.+16     	; 0xd7a <__divmodhi4_neg2>
 d6a:	14 d0       	rcall	.+40     	; 0xd94 <__udivmodhi4>
 d6c:	07 fc       	sbrc	r0, 7
 d6e:	05 d0       	rcall	.+10     	; 0xd7a <__divmodhi4_neg2>
 d70:	3e f4       	brtc	.+14     	; 0xd80 <__divmodhi4_exit>

00000d72 <__divmodhi4_neg1>:
 d72:	90 95       	com	r25
 d74:	81 95       	neg	r24
 d76:	9f 4f       	sbci	r25, 0xFF	; 255
 d78:	08 95       	ret

00000d7a <__divmodhi4_neg2>:
 d7a:	70 95       	com	r23
 d7c:	61 95       	neg	r22
 d7e:	7f 4f       	sbci	r23, 0xFF	; 255

00000d80 <__divmodhi4_exit>:
 d80:	08 95       	ret

00000d82 <__tablejump2__>:
 d82:	ee 0f       	add	r30, r30
 d84:	ff 1f       	adc	r31, r31
 d86:	00 24       	eor	r0, r0
 d88:	00 1c       	adc	r0, r0
 d8a:	0b be       	out	0x3b, r0	; 59
 d8c:	07 90       	elpm	r0, Z+
 d8e:	f6 91       	elpm	r31, Z
 d90:	e0 2d       	mov	r30, r0
 d92:	09 94       	ijmp

00000d94 <__udivmodhi4>:
 d94:	aa 1b       	sub	r26, r26
 d96:	bb 1b       	sub	r27, r27
 d98:	51 e1       	ldi	r21, 0x11	; 17
 d9a:	07 c0       	rjmp	.+14     	; 0xdaa <__udivmodhi4_ep>

00000d9c <__udivmodhi4_loop>:
 d9c:	aa 1f       	adc	r26, r26
 d9e:	bb 1f       	adc	r27, r27
 da0:	a6 17       	cp	r26, r22
 da2:	b7 07       	cpc	r27, r23
 da4:	10 f0       	brcs	.+4      	; 0xdaa <__udivmodhi4_ep>
 da6:	a6 1b       	sub	r26, r22
 da8:	b7 0b       	sbc	r27, r23

00000daa <__udivmodhi4_ep>:
 daa:	88 1f       	adc	r24, r24
 dac:	99 1f       	adc	r25, r25
 dae:	5a 95       	dec	r21
 db0:	a9 f7       	brne	.-22     	; 0xd9c <__udivmodhi4_loop>
 db2:	80 95       	com	r24
 db4:	90 95       	com	r25
 db6:	bc 01       	movw	r22, r24
 db8:	cd 01       	movw	r24, r26
 dba:	08 95       	ret

00000dbc <do_rand>:
 dbc:	8f 92       	push	r8
 dbe:	9f 92       	push	r9
 dc0:	af 92       	push	r10
 dc2:	bf 92       	push	r11
 dc4:	cf 92       	push	r12
 dc6:	df 92       	push	r13
 dc8:	ef 92       	push	r14
 dca:	ff 92       	push	r15
 dcc:	cf 93       	push	r28
 dce:	df 93       	push	r29
 dd0:	ec 01       	movw	r28, r24
 dd2:	68 81       	ld	r22, Y
 dd4:	79 81       	ldd	r23, Y+1	; 0x01
 dd6:	8a 81       	ldd	r24, Y+2	; 0x02
 dd8:	9b 81       	ldd	r25, Y+3	; 0x03
 dda:	61 15       	cp	r22, r1
 ddc:	71 05       	cpc	r23, r1
 dde:	81 05       	cpc	r24, r1
 de0:	91 05       	cpc	r25, r1
 de2:	21 f4       	brne	.+8      	; 0xdec <do_rand+0x30>
 de4:	64 e2       	ldi	r22, 0x24	; 36
 de6:	79 ed       	ldi	r23, 0xD9	; 217
 de8:	8b e5       	ldi	r24, 0x5B	; 91
 dea:	97 e0       	ldi	r25, 0x07	; 7
 dec:	2d e1       	ldi	r18, 0x1D	; 29
 dee:	33 ef       	ldi	r19, 0xF3	; 243
 df0:	41 e0       	ldi	r20, 0x01	; 1
 df2:	50 e0       	ldi	r21, 0x00	; 0
 df4:	4e d0       	rcall	.+156    	; 0xe92 <__divmodsi4>
 df6:	49 01       	movw	r8, r18
 df8:	5a 01       	movw	r10, r20
 dfa:	9b 01       	movw	r18, r22
 dfc:	ac 01       	movw	r20, r24
 dfe:	a7 ea       	ldi	r26, 0xA7	; 167
 e00:	b1 e4       	ldi	r27, 0x41	; 65
 e02:	63 d0       	rcall	.+198    	; 0xeca <__muluhisi3>
 e04:	6b 01       	movw	r12, r22
 e06:	7c 01       	movw	r14, r24
 e08:	ac ee       	ldi	r26, 0xEC	; 236
 e0a:	b4 ef       	ldi	r27, 0xF4	; 244
 e0c:	a5 01       	movw	r20, r10
 e0e:	94 01       	movw	r18, r8
 e10:	68 d0       	rcall	.+208    	; 0xee2 <__mulohisi3>
 e12:	dc 01       	movw	r26, r24
 e14:	cb 01       	movw	r24, r22
 e16:	8c 0d       	add	r24, r12
 e18:	9d 1d       	adc	r25, r13
 e1a:	ae 1d       	adc	r26, r14
 e1c:	bf 1d       	adc	r27, r15
 e1e:	b7 ff       	sbrs	r27, 7
 e20:	03 c0       	rjmp	.+6      	; 0xe28 <do_rand+0x6c>
 e22:	01 97       	sbiw	r24, 0x01	; 1
 e24:	a1 09       	sbc	r26, r1
 e26:	b0 48       	sbci	r27, 0x80	; 128
 e28:	88 83       	st	Y, r24
 e2a:	99 83       	std	Y+1, r25	; 0x01
 e2c:	aa 83       	std	Y+2, r26	; 0x02
 e2e:	bb 83       	std	Y+3, r27	; 0x03
 e30:	9f 77       	andi	r25, 0x7F	; 127
 e32:	df 91       	pop	r29
 e34:	cf 91       	pop	r28
 e36:	ff 90       	pop	r15
 e38:	ef 90       	pop	r14
 e3a:	df 90       	pop	r13
 e3c:	cf 90       	pop	r12
 e3e:	bf 90       	pop	r11
 e40:	af 90       	pop	r10
 e42:	9f 90       	pop	r9
 e44:	8f 90       	pop	r8
 e46:	08 95       	ret

00000e48 <rand_r>:
 e48:	b9 cf       	rjmp	.-142    	; 0xdbc <do_rand>

00000e4a <rand>:
 e4a:	80 e0       	ldi	r24, 0x00	; 0
 e4c:	91 e0       	ldi	r25, 0x01	; 1
 e4e:	b6 cf       	rjmp	.-148    	; 0xdbc <do_rand>

00000e50 <srand>:
 e50:	a0 e0       	ldi	r26, 0x00	; 0
 e52:	b0 e0       	ldi	r27, 0x00	; 0
 e54:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 e58:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 e5c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 e60:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 e64:	08 95       	ret

00000e66 <memset>:
 e66:	dc 01       	movw	r26, r24
 e68:	01 c0       	rjmp	.+2      	; 0xe6c <memset+0x6>
 e6a:	6d 93       	st	X+, r22
 e6c:	41 50       	subi	r20, 0x01	; 1
 e6e:	50 40       	sbci	r21, 0x00	; 0
 e70:	e0 f7       	brcc	.-8      	; 0xe6a <memset+0x4>
 e72:	08 95       	ret

00000e74 <strncpy>:
 e74:	fb 01       	movw	r30, r22
 e76:	dc 01       	movw	r26, r24
 e78:	41 50       	subi	r20, 0x01	; 1
 e7a:	50 40       	sbci	r21, 0x00	; 0
 e7c:	48 f0       	brcs	.+18     	; 0xe90 <strncpy+0x1c>
 e7e:	01 90       	ld	r0, Z+
 e80:	0d 92       	st	X+, r0
 e82:	00 20       	and	r0, r0
 e84:	c9 f7       	brne	.-14     	; 0xe78 <strncpy+0x4>
 e86:	01 c0       	rjmp	.+2      	; 0xe8a <strncpy+0x16>
 e88:	1d 92       	st	X+, r1
 e8a:	41 50       	subi	r20, 0x01	; 1
 e8c:	50 40       	sbci	r21, 0x00	; 0
 e8e:	e0 f7       	brcc	.-8      	; 0xe88 <strncpy+0x14>
 e90:	08 95       	ret

00000e92 <__divmodsi4>:
 e92:	05 2e       	mov	r0, r21
 e94:	97 fb       	bst	r25, 7
 e96:	16 f4       	brtc	.+4      	; 0xe9c <__divmodsi4+0xa>
 e98:	00 94       	com	r0
 e9a:	0f d0       	rcall	.+30     	; 0xeba <__negsi2>
 e9c:	57 fd       	sbrc	r21, 7
 e9e:	05 d0       	rcall	.+10     	; 0xeaa <__divmodsi4_neg2>
 ea0:	24 d0       	rcall	.+72     	; 0xeea <__udivmodsi4>
 ea2:	07 fc       	sbrc	r0, 7
 ea4:	02 d0       	rcall	.+4      	; 0xeaa <__divmodsi4_neg2>
 ea6:	46 f4       	brtc	.+16     	; 0xeb8 <__divmodsi4_exit>
 ea8:	08 c0       	rjmp	.+16     	; 0xeba <__negsi2>

00000eaa <__divmodsi4_neg2>:
 eaa:	50 95       	com	r21
 eac:	40 95       	com	r20
 eae:	30 95       	com	r19
 eb0:	21 95       	neg	r18
 eb2:	3f 4f       	sbci	r19, 0xFF	; 255
 eb4:	4f 4f       	sbci	r20, 0xFF	; 255
 eb6:	5f 4f       	sbci	r21, 0xFF	; 255

00000eb8 <__divmodsi4_exit>:
 eb8:	08 95       	ret

00000eba <__negsi2>:
 eba:	90 95       	com	r25
 ebc:	80 95       	com	r24
 ebe:	70 95       	com	r23
 ec0:	61 95       	neg	r22
 ec2:	7f 4f       	sbci	r23, 0xFF	; 255
 ec4:	8f 4f       	sbci	r24, 0xFF	; 255
 ec6:	9f 4f       	sbci	r25, 0xFF	; 255
 ec8:	08 95       	ret

00000eca <__muluhisi3>:
 eca:	31 d0       	rcall	.+98     	; 0xf2e <__umulhisi3>
 ecc:	a5 9f       	mul	r26, r21
 ece:	90 0d       	add	r25, r0
 ed0:	b4 9f       	mul	r27, r20
 ed2:	90 0d       	add	r25, r0
 ed4:	a4 9f       	mul	r26, r20
 ed6:	80 0d       	add	r24, r0
 ed8:	91 1d       	adc	r25, r1
 eda:	11 24       	eor	r1, r1
 edc:	08 95       	ret

00000ede <__mulshisi3>:
 ede:	b7 ff       	sbrs	r27, 7
 ee0:	f4 cf       	rjmp	.-24     	; 0xeca <__muluhisi3>

00000ee2 <__mulohisi3>:
 ee2:	f3 df       	rcall	.-26     	; 0xeca <__muluhisi3>
 ee4:	82 1b       	sub	r24, r18
 ee6:	93 0b       	sbc	r25, r19
 ee8:	08 95       	ret

00000eea <__udivmodsi4>:
 eea:	a1 e2       	ldi	r26, 0x21	; 33
 eec:	1a 2e       	mov	r1, r26
 eee:	aa 1b       	sub	r26, r26
 ef0:	bb 1b       	sub	r27, r27
 ef2:	fd 01       	movw	r30, r26
 ef4:	0d c0       	rjmp	.+26     	; 0xf10 <__udivmodsi4_ep>

00000ef6 <__udivmodsi4_loop>:
 ef6:	aa 1f       	adc	r26, r26
 ef8:	bb 1f       	adc	r27, r27
 efa:	ee 1f       	adc	r30, r30
 efc:	ff 1f       	adc	r31, r31
 efe:	a2 17       	cp	r26, r18
 f00:	b3 07       	cpc	r27, r19
 f02:	e4 07       	cpc	r30, r20
 f04:	f5 07       	cpc	r31, r21
 f06:	20 f0       	brcs	.+8      	; 0xf10 <__udivmodsi4_ep>
 f08:	a2 1b       	sub	r26, r18
 f0a:	b3 0b       	sbc	r27, r19
 f0c:	e4 0b       	sbc	r30, r20
 f0e:	f5 0b       	sbc	r31, r21

00000f10 <__udivmodsi4_ep>:
 f10:	66 1f       	adc	r22, r22
 f12:	77 1f       	adc	r23, r23
 f14:	88 1f       	adc	r24, r24
 f16:	99 1f       	adc	r25, r25
 f18:	1a 94       	dec	r1
 f1a:	69 f7       	brne	.-38     	; 0xef6 <__udivmodsi4_loop>
 f1c:	60 95       	com	r22
 f1e:	70 95       	com	r23
 f20:	80 95       	com	r24
 f22:	90 95       	com	r25
 f24:	9b 01       	movw	r18, r22
 f26:	ac 01       	movw	r20, r24
 f28:	bd 01       	movw	r22, r26
 f2a:	cf 01       	movw	r24, r30
 f2c:	08 95       	ret

00000f2e <__umulhisi3>:
 f2e:	a2 9f       	mul	r26, r18
 f30:	b0 01       	movw	r22, r0
 f32:	b3 9f       	mul	r27, r19
 f34:	c0 01       	movw	r24, r0
 f36:	a3 9f       	mul	r26, r19
 f38:	70 0d       	add	r23, r0
 f3a:	81 1d       	adc	r24, r1
 f3c:	11 24       	eor	r1, r1
 f3e:	91 1d       	adc	r25, r1
 f40:	b2 9f       	mul	r27, r18
 f42:	70 0d       	add	r23, r0
 f44:	81 1d       	adc	r24, r1
 f46:	11 24       	eor	r1, r1
 f48:	91 1d       	adc	r25, r1
 f4a:	08 95       	ret

00000f4c <_exit>:
 f4c:	f8 94       	cli

00000f4e <__stop_program>:
 f4e:	ff cf       	rjmp	.-2      	; 0xf4e <__stop_program>
